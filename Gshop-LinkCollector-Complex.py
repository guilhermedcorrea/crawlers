from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium import webdriver
import time
import lxml.html as parser
import requests
import csv
import random
from urllib.parse import urlsplit, urljoin, urlparse

# Page Down       : https://stackoverflow.com/questions/21006940/how-to-load-all-entries-in-an-infinite-scroll-at-once-to-parse-the-html-in-pytho
# Infinite Scroll : https://michaeljsanders.com/2017/05/12/scrapin-and-scrollin.html


class Product(object):
    def __init__(self):
        self.CodRef = ["7894200176459" , "7894200757429" , "7894200780625" , "7894200765660" , "7894200702870" , "7894200740162" , "7894200765363" , "7894200255673" , "7894200171003" , "7894200255659" , "7894200255642" , "7894200255611" , "7894200255598" , "7894200255581" , "7894200255550" , "7894200255543" , "7894200171010" , "7894200171027" , "7894200214502" , "7894200214489" , "7894200214472" , "7894200148838" , "7894200153443" , "7894200155614" , "7894200033080" , "7894200065487" , "7894200171881" , "7894200702054" , "7900000067771" , "7894200018728" , "7894200167372" , "7894200167365" , "7894200087793" , "7894200236405" , "7894200133308" , "7894200777267" , "7894200749585" , "7900000110149" , "7894200838401" , "7894201009800" , "7894200862871" , "7894200563242" , "7894200838265" , "7894200933052" , "7900000110163" , "7894200801559" , "7894200838500" , "7894200274704" , "7894200137542" , "7894200716600" , "7894200713463" , "7894200763734" , "7894200763574" , "7894200708674" , "7894200795940" , "7894200796954" , "7894200771241" , "7894200789581" , "7894200768258" , "7894200707011" , "7894200747529" , "7894200767084" , "7894200701644" , "7894200706625" , "7894200739579" , "7894200146384" , "7894200105114" , "7894200139829" , "7894200195702" , "7894200153986" , "7894200844778" , "7894200844846" , "7894200844884" , "7894200844952" , "7894200844976" , "7894200845041" , "7894200845164" , "7894200845263" , "7894200845300" , "7894200841784" , "7894200845386" , "7894200845461" , "7894200845584" , "7894200845621" , "7894200844570" , "7894200845669" , "7894200845744" , "7894200845836" , "7894200845874" , "7894200845881" , "7894200863519" , "7894200863793" , "7894200844655" , "7894200958314" , "7900000110187" , "7900000110194" , "7900000110200" , "7894200967460" , "7894200839507" , "7894200864622" , "7900000110279" , "7894200702825" , "7894200796572" , "7894200738855" , "7894200738831" , "7894200703464" , "7894200703440" , "7894200709022" , "7894200189343" , "7894200709732" , "7894200097686" , "7894200118886" , "7894200001638" , "7894200024750" , "7894200133339" , "7894200132202" , "7894200844792" , "7894200863496" , "7894200863465" , "7894200844969" , "7894200844983" , "7894200845171" , "7894200851820" , "7894200845317" , "7894200841722" , "7894200845591" , "7894200845676" , "7894200863458" , "7894200863410" , "7894200845850" , "7894200845904" , "7894200863427" , "7894200863786" , "7894200863489" , "7894200805977" , "7900000110330" , "7900000110354" , "7894200806349" , "7894200965688" , "7894200806912" , "7900000110392" , "7894200839521" , "7900000110408" , "7900000110422" , "7894200863762" , "7894200863731" , "7900000110453" , "7894200845287" , "7894200832669" , "7894200845607" , "7894200845683" , "7894200845751" , "7894200845843" , "7900000110484" , "7894200845898" , "7894200863694" , "7894200863816" , "7894200863755" , "7894200838593" , "7894200958307" , "7900000110491" , "7900000110538" , "7900000110545" , "7900000110552" , "7900000110569" , "7900000110576" , "7900000110583" , "7894200967422" , "7900000110637" , "7900000110644" , "7894200864721" , "7900000110651" , "7894200863670" , "7894200863649" , "7900000110668" , "7894200845294" , "7900000110675" , "7894200845331" , "7900000110699" , "7894200845690" , "7894200845867" , "7900000110712" , "7894200845911" , "7894200863601" , "7894200863809" , "7894200838623" , "7894200958291" , "7894200839743" , "7900000110743" , "7900000110781" , "7894200941033" , "7900000110804" , "7900000110811" , "7894200985952" , "7894200965701" , "7900000110828" , "7900000110835" , "7900000110842" , "7894200914617" , "7894200965565" , "7894200839569" , "7900000110866" , "7894200864677" , "7900000110880" , "7900000172611" , "7900000111283" , "7900000111160" , "7900000111214" , "7894200861362" , "7894201006984" , "7900000111443" , "7900000112778" , "7894194097976" , "7900000112815" , "7900000112846" , "7900000120490" , "7894200146193" , "7894200091639" , "7894200024873" , "7894200146186" , "7894200236467" , "7894200236450" , "7894200133278" , "7894200132240" , "7894200019329" , "7894200036807" , "7894200139805" , "7894200139799" , "7894200052319" , "7894200032441" , "7894200024255" , "7900000111566" , "7894200950783" , "7900000111610" , "7894200965756" , "7894200693017" , "7894200926931" , "7894200692980" , "7894200862901" , "7900000111733" , "7894200838463" , "7894200952343" , "7894200951674" , "7894200563228" , "7894200985983" , "7894200967484" , "7894200860648" , "7900000096719" , "7894200024613" , "7894200090298" , "7894200120193" , "7894200146162" , "7894200167242" , "7894200181255" , "7894200181286" , "7894200709763" , "7894200154013" , "7894200150084" , "7894200187288" , "7894200139775" , "7894200129295" , "7894200111375" , "7894200122548" , "7894200000471" , "7894200142737" , "7894200278962" , "7894200155041" , "7894200024330" , "7894200171560" , "7894200122425" , "7894200136231" , "7894200248415" , "7894200131069" , "7894200040033" , "7894200120315" , "7894200053613" , "7894200053552" , "7894200713265" , "7894200744726" , "7894200732983" , "7894200745655" , "7894200798095" , "7894200732594" , "7894200795469" , "7894200794684" , "7894200727255" , "7894200708148" , "7894200708155" , "7894200708445" , "7894200791102" , "7894200732334" , "7894200797944" , "7894200704928" , "7894200759942" , "7894200707745" , "7894200764137" , "7894200702078" , "7894200715863" , "7894200702559" , "7894200775010" , "7894200775089" , "7894200790754" , "7894200769460" , "7894200732082" , "7894200731894" , "7894200731719" , "7894200731658" , "7894200780380" , "7894200749783" , "7894200713616" , "7894200740681" , "7894200747482" , "7894200747499" , "7894200736592" , "7894200710820" , "7894200710868" , "7894200710875" , "7894200767183" , "7894200720935" , "7894200791089" , "7894200759843" , "7894200791805" , "7894200706731" , "7894200701408" , "7894200702320" , "7894200711919" , "7894200702429" , "7894200702443" , "7894200764168" , "7894200702450" , "7894200711889" , "7894200791621" , "7894200791027" , "7894200708049" , "7894200708131" , "7894200708698" , "7894200730972" , "7894200743866" , "7894200710752" , "7894200798040" , "7894200712015" , "7894200712022" , "7894200757917" , "7894200707998" , "7894200733256" , "7894200733034" , "7894200710189" , "7894200710219" , "7894200764311" , "7894200712053" , "7894200719984" , "7894200749806" , "7894200704683" , "7894200764151" , "7894200710592" , "7894200710707" , "7894200710721" , "7894200701712" , "7894200764120" , "7894200711803" , "7894200713272" , "7894200757818" , "7894200712107" , "7894200757849" , "7894200701996" , "7894200702085" , "7894200704812" , "7894200790778" , "7894200702535" , "7894200764144" , "7894200712084" , "7894200775034" , "7894200775041" , "7894200749592" , "7894200749790" , "7894200749813" , "7894200704713" , "7894200711902" , "7894200763802" , "7894200702337" , "7894200702351" , "7894200771814" , "7894200790655" , "7894200710967" , "7894200701736" , "7900000097099" , "7900000097327" , "7900000097082" , "7900000097228" , "7900000097020" , "7900000097037" , "7894200145899" , "7894200156826" , "7894200153900" , "7894200153894" , "7894200122364" , "7894200068945" , "7894200025344" , "7894200112594" , "7894200140818" , "7900000134084" , "7894200221166" , "7894200713623" , "7894200790983" , "7894200705376" , "7891444916742" , "7891444916728" , "7900000110736" , "7894200733027" , "7894200733003" , "7894200733263" , "7894200733157" , "7894200733065" , "7894200745600" , "7894200732730" , "7894200732693" , "7894200732617" , "7894200732525" , "7894200791119" , "7894200791126" , "7894200732372" , "7894200707547" , "7894200704997" , "7894200705505" , "7894200731764" , "7894200731733" , "7894200731726" , "7894200731702" , "7894200744474" , "7894200731498" , "7894200731238" , "7894200731221" , "7894200743965" , "7894200708223" , "7894200707080" , "7894200737162" , "7894200739456" , "7894200744849" , "7894200744863" , "7894200792451" , "7894200747505" , "7894200701507" , "7894200701484" , "7894200743521" , "7894200707103" , "7894200792482" , "7894200747536" , "7894200747550" , "7894200708704" , "7894200778929" , "7894200731061" , "7894200731023" , "7894200740032" , "7894200798064" , "7894200732518" , "7894200707332" , "7894200709879" , "7894200705581" , "7894200731924" , "7894200731740" , "7894200731689" , "7894200731245" , "7894200731214" , "7894200745273" , "7894200707165" , "7894200744399" , "7894200737148" , "7894200744856" , "7894200729433" , "7894200744252" , "7894200775218" , "7894200747543" , "7894200747567" , "7894200728009" , "7894200731016" , "7894200745754" , "7894200795452" , "7894200727231" , "7894200711056" , "7894200731832" , "7894200760924" , "7894200760719" , "7894200786696" , "7894200731870" , "7894200731818" , "7894200718598" , "7894200704300"]
        self.links = []
        self.start = "https://www.google.com"


def blank(texto):
    teste = " ".join(texto.split())
    return teste


def scrollpage(driver):
    lenOfPage = driver.execute_script(
        "window.scrollTo(0, document.body.scrollHeight);var lenOfPage=document.body.scrollHeight;return lenOfPage;")
    match = False

    while(match == False):
        lastCount = lenOfPage
        time.sleep(3)
        lenOfPage = driver.execute_script(
            "window.scrollTo(0, document.body.scrollHeight);var lenOfPage=document.body.scrollHeight;return lenOfPage;")
        if lastCount == lenOfPage:
            match = True


def randoms(ranges):
    ranges = random.randint(1, ranges)
    print(ranges)
    return ranges


driver = webdriver.Chrome()

Produto = Product()
url = "https://www.google.com/search?tbm=shop&ei=6MlFXNa_E7_W5OUP48KXoAo&q=00872006+Docol&oq=00872006+Docol&gs_l=psy-ab.12...9060.9060.0.9730.1.1.0.0.0.0.114.114.0j1.1.0....0...1c.1.64.psy-ab..0.0.0....0.THwmT0sQ-04"
driver.get(url)

for ID in Produto.CodRef:
    # Executa a pesquisa do produto (CODREF PRODUTO)

    RND = randoms(4)
    time.sleep(RND)
    input_element = driver.find_element_by_name("q")
    input_element.clear()
    input_element.send_keys(ID)
    print("Current : " + ID)
    input_element.submit()


    pagecheck = len(driver.find_elements_by_xpath(
            "//div[@class='sh-dgr__content']"))

        # PAGECHECK = 1 : PAGINA TIPO 1 : https://www.google.com/search?output=search&tbm=shop&q=torneira+deca&oq=torneira+deca&gs_l=products-cc.3..0l3.872451.877974.0.878100.33.14.9.9.5.0.159.1557.2j11.13.0....0...1ac.1.64.products-cc..2.25.1516....0.iRJdgDgEdVo#spd=11693232352436183965
        # PAGECHECK = 0 : Pagina Tipo 2 : https://www.google.com/search?tbm=shop&ei=z75FXIPYH5ax5OUP0fK48Ak&q=1990.C%3ECT&oq=1990.C%3ECT&gs_l=psy-ab.12...0.0.0.1600624.0.0.0.0.0.0.0.0..0.0....0...1c..64.psy-ab..0.0.0....0.hQyTpOywHxw

    if(pagecheck > 0):

        click_element = driver.find_element_by_xpath(
            "//div[@class='sh-dgr__content']")
        click_element.click()

        RND = randoms(3)
        time.sleep(RND)
        try:
            link = driver.find_elements_by_xpath("//a[@class='_-by']")
            link = link[0].get_attribute("href")
            link = urlparse(link).path.split("/online")
            link = Produto.start + link[0]
        except IndexError as e:
            link = "Not Found"

        dicionario = dict(CODREF=ID, URL=link)
        Produto.links.append(dicionario)

print(Produto.links)
driver.quit()

with open("Deca1.csv", 'w') as f:
    fieldnames = ["CODREF", "URL"]
    dict_writer = csv.DictWriter(f, fieldnames=fieldnames, delimiter=';')
    dict_writer.writeheader()
    dict_writer.writerows(Produto.links)
